# Load data
c <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/combined_years/results/canopy_cover_AUPC_slope_AVS.csv", check.names = FALSE)
library(tidyverse)
library(ggplot2)
library(agricolae)
library(tibble)
library(rmarkdown) # For formatting rmarkdown
View(c)
# Extract the columns with time point measurements
time_point_columns <- names(c_point)[2:29]
# Trim df to Plot and Time
c_point <- c[,c(1:29)]
# Extract the columns with time point measurements
time_point_columns <- names(c_point)[2:29]
# Initialize a list to store inflection points for each row
inflection_points_list <- list()
# Apply findpeaks function to each row's measurements
for (i in 1:nrow(df)) {
# Extract measurements for the current row
row_measurements <- as.numeric(df[i, time_point_columns])
# Find peaks (potential inflection points) for the current row
peaks <- findpeaks(row_measurements)
# Extract inflection points
inflection_points <- peaks$peakindex
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
}
# Apply findpeaks function to each row's measurements
for (i in 1:nrow(c_point)) {
# Extract measurements for the current row
row_measurements <- as.numeric(c_point[i, time_point_columns])
# Find peaks (potential inflection points) for the current row
peaks <- findpeaks(row_measurements)
# Extract inflection points
inflection_points <- peaks$peakindex
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
}
View(peaks)
install.packages("signal")
library(signal) # For finding inflection points
# Apply findpeaks function to each row's measurements
for (i in 1:nrow(c_point)) {
# Extract measurements for the current row
row_measurements <- as.numeric(c_point[i, time_point_columns])
# Find peaks (potential inflection points) for the current row
peaks <- findpeaks(row_measurements)
# Extract inflection points
inflection_points <- peaks$peakindex
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
}
View(peaks)
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
# Apply findpeaks function to each row's measurements
for (i in 1:nrow(c_point)) {
# Extract measurements for the current row
row_measurements <- as.numeric(c_point[i, time_point_columns])
# Find peaks (potential inflection points) for the current row
peaks <- findpeaks(row_measurements)
# Extract inflection points
inflection_points <- peaks$peak[, "pos"]
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
}
# Find peaks (potential inflection points) for the current row
peaks <- findpeaks(row_measurements)
# Extract inflection points
inflection_points <- peaks$peak[, "pos"]
# Extract inflection points
inflection_points <- peaks$peak[, 1]
# Find peaks (potential inflection points) for the current row
peaks <- findpeaks(row_measurements, npeaks = 2)
View(c_point)
# Extract inflection points
inflection_points <- peaks[, 1]
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
View(inflection_points_list)
View(inflection_points_list)
# Apply findpeaks function to each row's measurements
for (i in 1:nrow(c_point)) {
# Extract measurements for the current row
row_measurements <- as.numeric(c_point[i, time_point_columns])
# Find peaks (potential inflection points) for the current row
# Returns a matrix where each row represents one peak found. The first column gives the height, the second the position/index where the maximum is reached, the third and forth the indices of where the peak begins and ends — in the sense of where the pattern starts and ends.
peaks <- findpeaks(row_measurements, npeaks = 2)
# Extract inflection points
inflection_points <- peaks[, 1]
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
}
View(inflection_points_list)
install.packages("drc")
# Create sample data frame with response values in first column and dose values in second column.
c_point <- c[1,c(1:29)]
c_point_long <- c_point %>%
pivot_longer(names_to = "GDD", values_to = "CC")
c_point_long <- c_point %>%
pivot_longer(cols = 2:28, names_to = "GDD", values_to = "CC")
View(c_point_long)
# Create sample data frame with response values in first column and dose values in second column.
c_point <- c[1000,c(1:29)]
c_point_long <- c_point %>%
pivot_longer(cols = 2:22, names_to = "GDD", values_to = "CC")
View(c_point_long)
c_point_long <- c_point %>%
pivot_longer(cols = 2:28, names_to = "GDD", values_to = "CC")
View(c_point_long)
c_point_long <- c_point %>%
pivot_longer(cols = 2:29, names_to = "GDD", values_to = "CC")
View(c_point_long)
model <- drm(CC ~ GDD, data = c_point_long, fct = LL.4())
library(drc)
model <- drm(CC ~ GDD, data = c_point_long, fct = LL.4())
model <- drm(CC ~ GDD, data = c_point_long)
model <- drm(CC ~ GDD, data = c_point_long, fct = LL.4())
ggplot(c_point_long, aes(x = GDD, y = CC)) +
geom_line()
ggplot(c_point_long, aes(x = GDD, y = CC)) +
geom_point()
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC)) +
geom_point()
# Create sample data frame with response values in first column and dose values in second column.
c_point <- c[1003,c(1:29)]
c_point_long <- c_point %>%
pivot_longer(cols = 2:29, names_to = "GDD", values_to = "CC")
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC)) +
geom_point()
# Create sample data frame with response values in first column and dose values in second column.
c_point <- c[1020,c(1:29)]
c_point_long <- c_point %>%
pivot_longer(cols = 2:29, names_to = "GDD", values_to = "CC")
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC)) +
geom_point()
install.packages("nls.multstart")
library(nls.multstart)
model <- nls(CC ~ K / (1 + exp(-r * (GDD - t0))), data = c_point_long, start = list(K = max(your_data$value), r = 0.1, t0 = 300))
model <- nls(CC ~ K / (1 + exp(-r * (GDD - t0))), data = c_point_long, start = list(K = max(c_point_long$CC), r = 0.1, t0 = 300))
model <- nls(CC ~ K / (1 + exp(-r * (as.numeric(GDD) - t0))), data = c_point_long, start = list(K = max(c_point_long$CC), r = 0.1, t0 = 300))
model <- nls(CC ~ K / (1 + exp(-r * (as.numeric(GDD) - t0))), data = c_point_long, start = list(K = max(c_point_long$CC), r = 0.01, t0 = 300))
summary(model)
install.packages("signal")
install.packages("signal")
library(signal) # For finding inflection points
# Load data
c <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/combined_years/results/canopy_cover_AUPC_slope_AVS.csv", check.names = FALSE)
# Trim df to Plot and Time
c_point <- c[,c(1:29)]
# Extract the columns with time point measurements
time_point_columns <- names(c_point)[2:29]
# Initialize a list to store inflection points for each row
inflection_points_list <- list()
# Apply findpeaks function to each row's measurements
for (i in 1:nrow(c_point)) {
# Extract measurements for the current row
row_measurements <- as.numeric(c_point[i, time_point_columns])
# Find peaks (potential inflection points) for the current row
# Returns a matrix where each row represents one peak found. The first column gives the height, the second the position/index where the maximum is reached, the third and forth the indices of where the peak begins and ends — in the sense of where the pattern starts and ends.
peaks <- findpeaks(row_measurements, npeaks = 2)
# Extract inflection points
inflection_points <- peaks[, 1]
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
}
# Apply findpeaks function to each row's measurements
for (i in 1:nrow(c_point)) {
# Extract measurements for the current row
row_measurements <- as.numeric(c_point[i, time_point_columns])
# Find peaks (potential inflection points) for the current row
# Returns a matrix where each row represents one peak found. The first column gives the height, the second the position/index where the maximum is reached, the third and forth the indices of where the peak begins and ends — in the sense of where the pattern starts and ends.
peaks <- findpeaks(row_measurements, npeaks = 1)
# Extract inflection points
inflection_points <- peaks[, 1]
# Store inflection points in the list
inflection_points_list[[i]] <- inflection_points
}
View(inflection_points_list)
library(minpack.lm)
# Load data
c <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/combined_years/results/canopy_cover_AUPC_slope_AVS.csv", check.names = FALSE)
function (v = 49, w)
# Load data
c <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/combined_years/results/canopy_cover_AUPC_slope_AVS.csv", check.names = FALSE)
# Create sample data frame with response values in first column and dose values in second column.
c_point <- c[c(1:900, 1800, 2700),c(1:29)]
# Create sample data frame with response values in first column and dose values in second column.
c_point <- c[c(1, 900, 1800, 2700),c(1:29)]
View(c_point)
c_point_long <- c_point %>%
pivot_longer(cols = 2:29, names_to = "GDD", values_to = "CC")
# Example logistic growth function
logistic_growth <- function(time, A, K, r, t0) {
A / (1 + exp((t0 - time) * r)) + K
}
# Fit the model for each genotype
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(y ~ logistic_growth(time, A, K, r, t0), data = .))
# Fit the model for each genotype
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(time, A, K, r, t0), data = .))
# Fit the model for each genotype
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = .))
# Set initial model parameters
initial_values <- c(A = 1, K = 1, r = 0.01, t0 = 0)
# Fit the model for each genotype
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = ., start = initial_values))
# Set initial model parameters
initial_values <- c(A = 1, K = 1, r = 0.01, t0 = 800)
# Fit the model for each genotype
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = ., start = initial_values))
# Set initial model parameters
initial_values <- c(A = 1, K = 1, r = 0.1, t0 = 800)
# Fit the model for each genotype
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = ., start = initial_values))
# Set initial model parameters
initial_values <- c(A = 1, K = 1, r = 0.05, t0 = 800)
# Fit the model for each genotype
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = ., start = initial_values))
# Etract inflection points: Extract the inflection points from the fitted models. The inflection point occurs where the second derivative of the growth curve is zero.
extract_inflection_point <- function(model) {
coef <- coef(model)
inflection_point <- coef["t0"]
return(inflection_point)
}
inflection_points <- fit_models %>%
summarize(inflection_point = extract_inflection_point(model))
View(inflection_points)
# Visualize inflection points
ggplot(your_data, aes(x = time, y = y, color = genotype)) +
geom_point() +
geom_smooth(method = "nlsLM", formula = y ~ logistic_growth(x, A, K, r, t0), se = FALSE) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed") +
labs(title = "Genotype Growth Curves with Inflection Points")
# Visualize inflection points
ggplot(c_point_long, aes(x = GDD, y = CC, color = Plot)) +
geom_point() +
geom_smooth(method = "nlsLM", formula = y ~ logistic_growth(x, A, K, r, t0), se = FALSE) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed") +
labs(title = "Genotype Growth Curves with Inflection Points")
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
geom_smooth(method = "nlsLM", formula = y ~ logistic_growth(x, A, K, r, t0), se = FALSE) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed") +
labs(title = "Genotype Growth Curves with Inflection Points")
# Etract inflection points: Extract the inflection points from the fitted models. The inflection point occurs where the second derivative of the growth curve is zero.
extract_inflection_point <- function(model) {
coef <- coef(model)
inflection_point <- coef["t0"]
return(inflection_point)
}
inflection_points <- fit_models %>%
summarize(Plot = Plot[1], inflection_point = coef(model)["t0"])
View(inflection_points)
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
geom_smooth(method = "nlsLM", formula = y ~ logistic_growth(x, A, K, r, t0), se = FALSE) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed", color = Plot) +
labs(title = "Genotype Growth Curves with Inflection Points")
inflection_points <- fit_models %>%
summarize(Plot = Plot[1], inflection_point = coef(model)["t0"])
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
geom_smooth(method = "nlsLM", formula = y ~ logistic_growth(x, A, K, r, t0), se = FALSE) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed", color = inflection_points$Plot) +
labs(title = "Genotype Growth Curves with Inflection Points")
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
geom_smooth(method = "nlsLM", formula = CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = ., start = initial_values, se = FALSE) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed", color = inflection_points$Plot) +
labs(title = "Genotype Growth Curves with Inflection Points")
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
geom_smooth(method = "nlsLM", formula = CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), start = initial_values, se = FALSE) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed", color = inflection_points$Plot) +
labs(title = "Genotype Growth Curves with Inflection Points")
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
geom_smooth(method = "nlsLM", formula = c_point_long$CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), start = initial_values, se = FALSE) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed", color = inflection_points$Plot) +
labs(title = "Genotype Growth Curves with Inflection Points")
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
stat_smooth(method="loess", formula = y ~ x) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed", color = inflection_points$Plot) +
labs(title = "Genotype Growth Curves with Inflection Points")
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
stat_smooth(method="loess", formula = y ~ x) +
geom_vline(xintercept = inflection_points$inflection_point, linetype = "dashed", color = Plot) +
labs(title = "Genotype Growth Curves with Inflection Points")
# Visualize inflection points
ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
geom_point() +
stat_smooth(method = "loess", formula = y ~ x) +
geom_segment(data = inflection_points, aes(x = inflection_point, xend = inflection_point, y = -Inf, yend = Inf, color = Plot),
linetype = "dashed") +
labs(title = "Genotype Growth Curves with Inflection Points")
library(tidyverse)
library(ggplot2)
library(agricolae)
library(tibble)
library(rmarkdown) # For formatting rmarkdown
library(minpack.lm) # for nlsLM function
# Load data
c <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/combined_years/results/canopy_cover_AUPC_slope_AVS.csv", check.names = FALSE)
# Create % CC data frame with response values in first column and dose values in second column.
c_point <- c[,c(1:29)]
c_point_long <- c_point %>%
pivot_longer(cols = 2:29, names_to = "GDD", values_to = "CC") # Pivot long
# Load data
c <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/combined_years/results/canopy_cover_AUPC_slope_AVS.csv", check.names = FALSE)
# Create % CC data frame with response values in first column and dose values in second column.
c_point <- c[,c(1:29)]
c_point_long <- c_point %>%
pivot_longer(cols = 2:29, names_to = "GDD", values_to = "CC") # Pivot long
# To find infelction point, fit a logistic function to each plot
# Define logistic growth function
logistic_growth <- function(time, A, K, r, t0) {
A / (1 + exp((t0 - time) * r)) + K
}
# Set initial model parameters
initial_values <- c(A = 1, K = 1, r = 0.05, t0 = 800)
# A = K = Hypothetical carrying capacity
# r = growth rate
# t0 = time when population is half of carrying capacity
# Fit the model for each plot
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = ., start = initial_values))
# Extract the inflection points from the fitted models. The inflection point occurs where the second derivative of the growth curve is zero.
extract_inflection_point <- function(model) {
coef <- coef(model)
inflection_point <- coef["t0"]
return(inflection_point)
}
inflection_points <- fit_models %>%
summarize(Plot = Plot[1], inflection_point = coef(model)["t0"])
# Visualize inflection points
# ggplot(c_point_long, aes(x = as.numeric(GDD), y = CC, color = Plot)) +
#   geom_point() +
#   stat_smooth(method = "loess", formula = y ~ x) +
#   geom_segment(data = inflection_points, aes(x = inflection_point, xend = inflection_point, y = -Inf, yend = Inf, color = Plot),
#                linetype = "dashed") +
#   labs(title = "Genotype Growth Curves with Inflection Points")
View(inflection_points)
View(fit_models)
View(inflection_points)
warnings()
# Set initial model parameters
initial_values <- c(A = 1, K = 1, r = 0.01, t0 = 800)
# Fit the model for each plot
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = ., start = initial_values))
# Extract the inflection points from the fitted models. The inflection point occurs where the second derivative of the growth curve is zero.
extract_inflection_point <- function(model) {
coef <- coef(model)
inflection_point <- coef["t0"]
return(inflection_point)
}
inflection_points <- fit_models %>%
summarize(Plot = Plot[1], inflection_point = coef(model)["t0"])
View(inflection_points)
# Set initial model parameters
initial_values <- c(A = 1, K = 1, r = 0.01, t0 = 1000)
# Fit the model for each plot
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0), data = ., start = initial_values))
# Extract the inflection points from the fitted models. The inflection point occurs where the second derivative of the growth curve is zero.
extract_inflection_point <- function(model) {
coef <- coef(model)
inflection_point <- coef["t0"]
return(inflection_point)
}
inflection_points <- fit_models %>%
summarize(Plot = Plot[1], inflection_point = coef(model)["t0"])
# Fit the model for each plot
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0),
data = .,
start = initial_values,
control = nls.control(maxiter = 1000))  # You can adjust the value of maxiter
))
# Fit the model for each plot
fit_models <- c_point_long %>%
group_by(Plot) %>%
do(model = nlsLM(CC ~ logistic_growth(as.numeric(GDD), A, K, r, t0),
data = .,
start = initial_values,
control = nls.control(maxiter = 1000)))  # You can adjust the value of maxiter
# Extract the inflection points from the fitted models. The inflection point occurs where the second derivative of the growth curve is zero.
extract_inflection_point <- function(model) {
coef <- coef(model)
inflection_point <- coef["t0"]
return(inflection_point)
}
inflection_points <- fit_models %>%
summarize(Plot = Plot[1], inflection_point = coef(model)["t0"])
c_inflection <- merge(c_point, inflection_points, by = Plot)
View(c_point)
View(inflection_points)
c_inflection <- merge(c_point, inflection_points, by = "Plot")
View(c_inflection)
View(c)
# Create % CC data frame with response values in first column and dose values in second column.
c_point <- c[,c(1:34)]
c_point_long <- c_point %>%
pivot_longer(cols = 2:29, names_to = "GDD", values_to = "CC") # Pivot long
c_inflection <- merge(c_point, inflection_points, by = "Plot")
View(c_inflection)
ggplot(c_inflection, aes(x = Year, y = inflection_point))
ggplot(c_inflection, aes(x = Year, y = inflection_point)) +
geom_boxplot()
ggplot(c_inflection, aes(x = Year, y = inflection_point, group = Year)) +
geom_boxplot()
ggplot(c_inflection, aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(inflection_point < 1650 & inflection_point > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(inflection_point < 1650) %>% # & inflection_point > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
as.factor(Year) %>%
filter(inflection_point < 1650 & inflection_point > 300) %>%
ggplot(aes(x = Year, y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
as.factor(c_inflection$Year) %>%
filter(inflection_point < 1650 & inflection_point > 300) %>%
ggplot(aes(x = Year, y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(inflection_point < 1650 & inflection_point > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(inflection_point < 1650) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(inflection_point < 1650)
c_inflection %>%
filter(`inflection_point` < 1650)
c_inflection %>%
filter(c_inflection$inflection_point < 1650)
c_inflection %>%
filter(inflection_point < 1650 & inflection_point > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
inflection_points <- fit_models %>%
summarize(Plot = Plot[1], IP = coef(model)["t0"])
# Merge inflection point df with % CC df
c_inflection <- merge(c_point, inflection_points, by = "Plot")
c_inflection %>%
filter(IP < 1650 & IP > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(c_inlection, IP < 1650 & IP > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(c_inflection, IP < 1650 & IP > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(c_inflection$IP < 1650 & IP > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter(c_inflection$IP < 1650 & c_inflection$IP > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter("IP" < 1650 & IP > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
c_inflection %>%
filter("IP" < 1650 & "IP" > 300) %>%
ggplot(aes(x = as.factor(Year), y = inflection_point, group = Year)) +
geom_boxplot()
filter(c_inflection, IP < 1650)
colnames(c_inflection)
class(c_inflection)
