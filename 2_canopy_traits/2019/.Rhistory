# Read in PlantRatio_plot
c2019 <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/data_processing/2PlantRatio_plot.csv", check.names = FALSE)
# Read in stand counts
stand2019 <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/field_data/2019_stand_JC01052022.csv")
# Merge by "Plot"
c_stand <- merge(c2019, stand2019, by = "Plot")
# Change stand counts to numeric
c_stand$Stand <- as.numeric(c_stand$Stand)
# Filter for stand counts > 14
c_standfilter <- c_stand %>%
filter(Stand > 14) # n = 944
library(dplyr)
library(data.table)
library(tidyverse)
# Read in final Plant Ratio file
CC_final <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/data_processing/1PlantRatio.csv", check.names = FALSE)
# Read in plot order file
p_order <- read.table("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/plot_order/Plots_WIDIV_Ordered.txt", header = TRUE)
#Column bind data frames
CC_final1 <- cbind(p_order, CC_final)
#Filter out PH207 filler rows
CC_final2 <- CC_final1[CC_final1$Plot !='PH207',]
write.csv(CC_final2, "/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/data_processing/2PlantRatio_plot.csv",  row.names = FALSE)
##################
# QC
# Pivot Table into "long"
ccfinal_long <- pivot_longer(CC_final2, cols=2:12, names_to="flight", values_to="canopy_cover")
# Make "flight" numeric
ccfinal_long$flight <- as.numeric(ccfinal_long$flight)
# Plot
ggplot(data=ccfinal_long, aes(x=flight, y=canopy_cover)) +
#geom_point(color="gray", size=.1) +
geom_line(aes(group=Plot), color="gray") +
stat_smooth(method="loess", formula = y ~ x) +
stat_summary(aes(flight, canopy_cover), geom = 'point', fun = mean, shape = 17, size = 3, col = "red") +
theme_bw() +
xlab('Flight (GDD)') +
ylab('Plant Ratio') +
ggtitle("2019 Double Dilated Percent Canopy Cover")+
labs(caption = "n = 1040")
# Read in PlantRatio_plot
c2019 <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/data_processing/2PlantRatio_plot.csv", check.names = FALSE)
# Read in stand counts
stand2019 <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/field_data/2019_stand_JC01052022.csv")
# Merge by "Plot"
c_stand <- merge(c2019, stand2019, by = "Plot")
# Change stand counts to numeric
c_stand$Stand <- as.numeric(c_stand$Stand)
# Filter for stand counts > 14
c_standfilter <- c_stand %>%
filter(Stand > 14) # n = 944
# Save data frame
write.csv(c_standfilter, "/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/data_processing/3PlantRatio_plot_stand.csv",  row.names = FALSE)
##################
# QC
# Pivot Table into "long"
ccfinal_long <- pivot_longer(c_standfilter, cols=2:12, names_to="flight", values_to="canopy_cover")
# Make "flight" numeric
ccfinal_long$flight <- as.numeric(ccfinal_long$flight)
# Plot
ggplot(data=ccfinal_long, aes(x=flight, y=canopy_cover)) +
#geom_point(color="gray", size=.1) +
geom_line(aes(group=Plot), color="gray") +
stat_smooth(method="loess", formula = y ~ x) +
stat_summary(aes(flight, canopy_cover), geom = 'point', fun = mean, shape = 17, size = 3, col = "red") +
theme_bw() +
xlab('Flight (GDD)') +
ylab('Plant Ratio') +
ggtitle("2019 Double Dilated Percent Canopy Cover - Weeds, Stand") +
labs(caption = "n = 944")
# Read in data
c2019 <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/data_processing/3PlantRatio_plot_stand.csv", check.names = FALSE)
# Remove extra columns
c2019 <- c2019[, 1:12]
# Remove bad flight date 769.5 GDD
c2019 <- c2019[,-7]
# Function to filter peaks and valleys
big_data <- data.frame() #make empty data frame
filter_peaks <- function(df) { #Input df into function
for (i in seq_len(nrow(df))) { #For each row in data frame
row <- df[i,] #Subset row
names <- colnames(row) # Make list of column names
# Pivot row into long
row <- pivot_longer(row, cols = names[2:11], names_to = "flight", values_to = "closure")
# print(row)
left <- 1 # Set left end of sliding evaluation window
right <- 3 # Set right end of sliding evaluation window
# Check for dips
for (j in 1:1) {row[j,4] <- NA} # Nothing to compare first flight to, automatically label good
for (j in 2:9) { #For each column in row starting at 3
# Rules of finding valleys
if (row[j, 3] < row[left, 3] * .90)
if (row[right, 3] > row[j, 3])
if (row[left, 3] < row[right, 3])
{row[j,4] <- "dip"}
# Rules for finding peaks
if (row[j, 3] > row[right, 3] * 1.10)
if (row[right, 3] > row[left, 3])
if (row[left, 3] < row[j, 3])
{row[j,4] <- "peak"}
# Move sliding window to next data point
left <- left + 1
right <- right + 1
}
# Rules for checking if last data point is valley, can't check for peaks b/c nothing to compare to on right
for (j in 10:10) {
if ((row[j, 3]/row[9, 3]) < .90) {row[j,4] <- "dip"} else {row[j,4] <- NA}
}
big_data <- rbind(big_data, row) # Bind each row back to the empty data frame created outside the function
}
c2019_dipdrop <<- big_data # Export data frame with peaks and valleys labeled outside of function
}
# Run Function
filter_peaks(c2019)
# Make new column copying closure
c2019_dipdrop$closureNA <- c2019_dipdrop$closure
# Replace data points with NA if tagged as peak or valley
c2019_dipdrop$closureNA <- ifelse(is.na(c2019_dipdrop$...4), c2019_dipdrop$closure, ifelse(c2019_dipdrop$...4 == "dip",  NA, ifelse(c2019_dipdrop$...4 == "peak", NA, c2019_dipdrop$closure)))
# Remove extra columns
c2019_dipdrop <- c2019_dipdrop[,c(1, 2, 5)]
# Pivot wide To count # of NA per row
c2019_wide <- pivot_wider(c2019_dipdrop, names_from = "flight", values_from = "closureNA")
# Make new column with na counts
c2019_wide$na_count <- apply(c2019_wide, 1, function(x) sum(is.na(x)))
# Pivot back to long to filter out na counts past certain threshold
c2019_long <- c2019_wide %>%
pivot_longer(cols = 2:11, names_to = "flight", values_to = "closure")
# Count na
c2019_long %>%
summarise(sum(is.na(closure))) # 721 NA data points
# Filter plots with na count > 3
c2019_filter <- c2019_long %>%
filter(na_count < 3)
# Count number of plots
c2019_filter %>%
summarise(n_distinct(Plot)) # Keeps 855 of 941 plots
# Count na
c2019_filter%>%
summarise(sum(is.na(closure))) # 404 NA data points
# Pivot back to wide
c2019_final <- pivot_wider(c2019_filter, names_from = "flight", values_from = "closure")
# Save data frame
write.csv(c2019_final, "/Users/jcooper/Desktop/thesis_research/canopy_cover/2_canopy_traits/2019/data/data_processing/4PlantRatio_plot_stand_dips.csv",  row.names = FALSE)
##################
# QC
# Make "flight" numeric
c2019_filter$flight <- as.numeric(c2019_filter$flight)
# Plot
ggplot(data=c2019_filter, aes(x=flight, y=closure)) +
#geom_point(color="gray", size=.1) +
geom_line(data=c2019_filter[!is.na(c2019_filter$closure),], aes(group=Plot), color="gray") +
stat_smooth(method="loess", formula = y ~ x) +
stat_summary(aes(flight, closure), geom = 'point', fun = mean, shape = 17, size = 3, col = "red") +
theme_bw() +
xlab('Flight (GDD)') +
ylab('Plant Ratio') +
ggtitle("2019 Double Dilated Percent Canopy Cover - Weeds, Stand, Peaks and Valleys") +
labs(caption = "n = 855")
