library(tidyverse)
library(ggplot2)
library(agricolae)
library(tibble)
library(metan)
library(data.table)
devtools::install_github("ajaygpb/ammistability")
library(ammistability)
library(plotly)
library(hrbrthemes)
library(heatmaply)
library(gridExtra)
library(gtable)
library(grid)
library(egg)
library(ggpubr)
library(scales)
library(devtools)
install_github("lian0090/FW")
library(FW)
library(coda)
library(tidyverse)
library(ggplot2)
library(MASS)
# Load point data frame
AMMI_point <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/stability/AMMI/data/AMMI_point.csv", check.names = FALSE)
# Remove incomplete GDD with multiple missing genotypes (due to 2018 and 2020)
cut <- c(300, 350, 400, 1500, 1550, 1600, 1650)
# Filter point data frame
AMMI_cut <- AMMI_point %>%
filter(!(GDD %in% cut))
# Remove excess columns
point_SI <- AMMI_cut[, c(1:2, 13)]
# Pivot wide so each GDD is own column
wide_SI <- pivot_wider(point_SI, names_from = GDD, values_from = AVAMGE)
# Change Genotype column to index
wide_SI <- wide_SI %>% column_to_rownames("Genotype")
# Extract genotype order
s <- heatmaply(wide_SI,
dendrogram = "row",
xlab = "GDD", ylab = "Genotype",
main = "Point SI",
label_names = c("Genotype", "GDD:", "SI:"),
showticklabels = c(TRUE, FALSE),
)
s
test <- s$x
test1 <- test$data
test2 <- test1[[1]]
test3 <- test2$text
geno_order <- test3[,1]
# Isolate genotype names
geno_order_clean <- str_sub(geno_order, 11) #Cut off first 11 characters
point_order_clean_regex <- gsub("<br>GDD:: 450<br>SI:: .+","", geno_order_clean) #Cut off trailing characters
# Set genotype as factor in order of list from heatmaply
point_SI$Genotype = factor(point_SI$Genotype, levels = point_order_clean_regex)
# Plot heatmap using ggplot
a <- ggplot(point_SI, aes(x = as.factor(GDD), y = Genotype, fill= AVAMGE)) +
geom_tile() +
scale_x_discrete(breaks = c("450", "650", "850", "1050", "1250", "1450"), guide = guide_axis(angle = 30)) +
theme_classic() +
theme(axis.text.y =element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank(),
axis.line.x=element_blank()) +
xlab("Point") +
ylab("Genotype") +
scale_fill_viridis()
#Shrink legend
addSmallLegend <- function(myPlot, pointSize = 4, textSize = 8, spaceLegend = .9) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize))) +
theme(legend.text  = element_text(size = textSize), legend.key.size = unit(spaceLegend, "lines"))
}
a <- addSmallLegend(a)
a
###### Find top 5% of least stable lines
point_avg <- point_SI %>%
group_by(Genotype) %>%
summarise(mean(AVAMGE)) %>%
ungroup()
# 5% of 366 is 18 genotypes
percent_point_avg <- point_avg %>%    # Top N highest values by group
arrange(desc(`mean(AVAMGE)`)) %>%
slice(1:18)
percent_point_avg$Genotype <- as.character(percent_point_avg$Genotype)
top_point <- percent_point_avg$Genotype
dev.off
AMMI_area <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/stability/AMMI/data/AMMI_area.csv", check.names = FALSE)
# Cut excess columns
AMMI_area_short <- AMMI_area[,c(1:2, 13)]
AMMI_area$Genotype = factor(AMMI_area$Genotype, levels = point_order_clean_regex) # Set genotype as factor in order of list from heatmaply
b <- ggplot(AMMI_area, aes(x = as.factor(GDD), y = Genotype, fill= AVAMGE)) +
geom_tile() +
theme_classic() +
theme(axis.text.y =element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank(),
axis.line.x=element_blank(),
legend.title=element_blank()) +
scale_x_discrete(labels = c("450-1450")) +
xlab("Area") +
scale_fill_viridis()
b <- addSmallLegend(b)
b
###### Find top 5% of least stable lines
area_avg <- AMMI_area_short %>%
group_by(Genotype) %>%
summarise(mean(AVAMGE)) %>%
ungroup()
# 5% of 366 is 18 genotypes
percent_area_avg <- area_avg %>%    # Top N highest values by group
arrange(desc(`mean(AVAMGE)`)) %>%
slice(1:18)
percent_area_avg$Genotype <- as.character(percent_area_avg$Genotype)
top_area <- percent_area_avg$Genotype
AMMI_slope <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/stability/AMMI/data/AMMI_slope.csv", check.names = FALSE)
# Remove incomplete GDD with multiple missing genotypes (due to 2018 and 2020)
cut <- c(1, 2, 3, 24, 25, 26, 27)
# Filter point data frame
AMMI_cut <- AMMI_slope %>%
filter(!(GDD %in% cut))
# Cut excess columns
AMMI_slope_short <- AMMI_cut[,c(1:2, 13)]
# Plot using point order
AMMI_slope_short$Genotype = factor(AMMI_slope_short$Genotype, levels = point_order_clean_regex) # Set genotype as factor in order of list from heatmaply
# Change GDD numbers to intervals
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "4"] <- "450-500"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "5"] <- "500-550"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "6"] <- "550-600"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "7"] <- "600-650"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "8"] <- "650-700"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "9"] <- "700-750"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "10"] <- "750-800"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "11"] <- "800-850"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "12"] <- "850-900"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "13"] <- "900-950"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "14"] <- "950-1000"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "15"] <- "1000-1050"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "16"] <- "1050-1100"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "17"] <- "1100-1150"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "18"] <- "1150-1200"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "19"] <- "1200-1250"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "20"] <- "1250-1300"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "21"] <- "1300-1350"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "22"] <- "1350-1400"
AMMI_slope_short$GDD[AMMI_slope_short$GDD == "23"] <- "1400-1450"
order <- as.character(c("450-500", "500-550", "550-600", "600-650", "650-700", "700-750",  "750-800",  "800-850",  "850-900",  "900-950",  "950-1000",  "1000-1050", "1050-1100",  "1100-1150",  "1150-1200",  "1200-1250",  "1250-1300",  "1300-1350",  "1350-1400",  "1400-1450"))
c <- ggplot(AMMI_slope_short, aes(x=factor(GDD, levels = order), y = Genotype, fill= AVAMGE)) +
geom_tile() +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y=element_blank(),
axis.line.x=element_blank(), legend.title=element_blank()) +
scale_x_discrete(breaks = c("450-500", "650-700", "850-900", "1050-1100", "1250-1300", "1400-1450"), guide = guide_axis(angle = 30)) +
xlab("Slope") +
scale_fill_viridis()
c <- addSmallLegend(c)
c
####################
# Plot using slope genotype order
# Pivot wide so each GDD is own column
# wide_SI <- pivot_wider(AMMI_slope_short, names_from = GDD, values_from = AVAMGE)
#
# # Change Genotype column to index
# wide_SI <- wide_SI %>% column_to_rownames("Genotype")
#
# # Extract genotype order
# s <- heatmaply(wide_SI,
#         dendrogram = "row",
#         xlab = "GDD", ylab = "Genotype",
#         main = "Slope SI",
#         label_names = c("Genotype", "GDD:", "SI:"),
#         showticklabels = c(TRUE, FALSE),
# )
#
# s
#
# test <- s$x
# test1 <- test$data
# test2 <- test1[[1]]
# test3 <- test2$text
# geno_order <- test3[,1]
#
# # Isolate genotype names
# geno_order_clean <- str_sub(geno_order, 11) #Cut off first 11 characters
#
# slope_order_clean_regex <- gsub("<br>GDD:: 4<br>SI:: .+","", geno_order_clean) #Cut off trailing characters
#
# AMMI_slope_short$Genotype = factor(AMMI_slope_short$Genotype, levels = slope_order_clean_regex) # Set genotype as factor in order of list from heatmaply
#
# c <- ggplot(AMMI_slope_short, aes(x = as.numeric(GDD), y = Genotype, fill= AVAMGE)) +
#   geom_tile() +
#   theme(axis.text.y =element_blank(),
#         axis.ticks.y=element_blank()) +
#   xlab("Growing Degree Day (GDD)") +
#   ylab("Genotype") +
#   scale_fill_gradient(low="#F8766D", high="#00BCF4", name = "Stability Rank") +
#   scale_fill_viridis() +
#   ggtitle("Slope Stability Over Time")
#
# c
###### Find top 5% of least stable lines
slope_avg <- AMMI_slope_short %>%
group_by(Genotype) %>%
summarise(mean(AVAMGE)) %>%
ungroup()
# 5% of 366 is 18 genotypes
percent_slope_avg <- slope_avg %>%    # Top N highest values by group
arrange(desc(`mean(AVAMGE)`)) %>%
slice(1:18)
percent_slope_avg$Genotype <- as.character(percent_slope_avg$Genotype)
top_slope <- percent_slope_avg$Genotype
AMMI_expslope <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/stability/AMMI/data/AMMI_expslope.csv", check.names = FALSE)
# Cut excess columns
AMMI_expslope_short <- AMMI_expslope[,c(1:2, 13)]
# Plot using point genotype order
AMMI_expslope$Genotype = factor(AMMI_expslope$Genotype, levels = point_order_clean_regex) # Set genotype as factor in order of list from heatmaply
# Relabel GDD column
AMMI_expslope$GDD[AMMI_expslope$GDD == "Exp"] <- "600-1000"
d <- ggplot(AMMI_expslope, aes(x = as.character(GDD), y = Genotype, fill= AVAMGE)) +
geom_tile() +
theme_classic() +
theme(axis.text.y =element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank(),
axis.line.x=element_blank(),
legend.title=element_blank()) +
scale_x_discrete(breaks = c("600-1000")) +
xlab("Exp Slope") +
ylab("Genotype") +
scale_fill_viridis(breaks = c(.0002, .0007), labels = c(".0002", ".0007"))
d <- addSmallLegend(d)
d
###############################
# Plot using slope genotype order
# AMMI_expslope$Genotype = factor(AMMI_expslope$Genotype, levels = slope_order_clean_regex) # Set genotype as factor in order of list from heatmaply
#
# d <- ggplot(AMMI_expslope, aes(x = as.character(GDD), y = Genotype, fill= AVAMGE)) +
#   geom_tile() +
#   theme(axis.text.y =element_blank(),
#         axis.ticks.y=element_blank()) +
#   xlab("Growing Degree Day (GDD)") +
#   ylab("Genotype") +
#   scale_fill_gradient(low="#F8766D", high="#00BCF4", name = "Stability Rank") +
#   scale_fill_viridis() +
#   ggtitle("Slope Stability Over Time")
#
# d
###### Find top 5% of least stable lines
exp_avg <- AMMI_expslope_short %>%
group_by(Genotype) %>%
summarise(mean(AVAMGE)) %>%
ungroup()
# 5% of 366 is 18 genotypes
percent_exp_avg <- exp_avg %>%    # Top N highest values by group
arrange(desc(`mean(AVAMGE)`)) %>%
slice(1:18)
percent_exp_avg$Genotype <- as.character(percent_exp_avg$Genotype)
top_exp <- percent_exp_avg$Genotype
## Save data
least_stable_AMMI <- data.frame(area = top_area, point = top_point, slope = top_slope, exp = top_exp)
write.csv(least_stable_AMMI, file = "/Users/jcooper/Desktop/thesis_research/canopy_cover_master/stability/AMMI/data/AMMI_least_stable.csv", row.names = FALSE)
AMMI_least <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/stability/AMMI/data/AMMI_least_stable.csv", check.names = FALSE)
if (!require(devtools)) install.packages("devtools")
devtools::install_github("gaospecial/ggVennDiagram")
library("ggVennDiagram")
x <- list(
Area = AMMI_least$area,
Exp = AMMI_least$exp,
Slope = AMMI_least$slope,
Point = AMMI_least$point
)
t <- ggVennDiagram(x)
t
# Find same
Reduce(intersect, list(AMMI_least$exp,AMMI_least$area,AMMI_least$slope, AMMI_least$point))
dev.off()
x <- list(
Area = AMMI_least$area,
Exp = AMMI_least$exp,
Slope = AMMI_least$slope,
Point = AMMI_least$point
)
t <- ggVennDiagram(x)
t
library(tidyverse)
library(ggplot2)
library(UpSetR)
library(ggupset)
library(ggpubr)
library(gridExtra)
library(gtable)
library(grid)
library(metan)
library(data.table)
library(ggridges)
library(magrittr)
g <- read.delim("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/GWAS/SNP_analysis/results/LD_merged_sig_snps_FarmCPU.txt")
# Group by SNP and collapse all unique phenotypes for each SNP into a list
upset_trait_GWAS <- g %>%
group_by(SNP) %>%
summarize(type = list(unique(Phenotype)))
# Upset plot of phenotype categories
trait_upset <- upset_trait_GWAS %>%
ggplot(aes(x=type)) +
#geom_text(stat='count', aes(label=after_stat(count)), vjust= -.1, size = 4) +
theme_classic() +
geom_bar() +
scale_x_upset(n_intersections = 99) +
#ggtitle("Marker Trait Associations Per Trait") +
xlab("Trait") +
ylab("Count") +
theme_combmatrix(combmatrix.panel.point.size = 1,
combmatrix.panel.line.size = .5,
combmatrix.label.make_space = TRUE)
trait_upset
g <- read.delim("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/GWAS/SNP_analysis/results/LD_merged_sig_snps_FarmCPU.txt")
g <- g %>%
mutate(Year = replace(Year, Year == "ALL", "Inter-Year")) %>%
mutate(Year = replace(Year, Year == "FW", "FW")) %>%
mutate(Year = replace(Year, Year == "AMMI", "AMMI"))
# Group by SNP and collapse all unique environments for each SNP into a list
upset_env_GWAS <- g %>%
group_by(SNP) %>%
summarize(type = list(unique(Year)))
# Upset plot of environment categories
env_upset <- upset_env_GWAS %>%
ggplot(aes(x=type)) +
theme_classic() +
#geom_text(stat='count', aes(label=after_stat(count)), vjust= -.1, size = 4) +
geom_bar() +
scale_x_upset(n_intersections = 99) +
#ggtitle("Marker Trait Associations Per Environment") +
xlab("BLUP") +
ylab("Count") +
theme_combmatrix(combmatrix.panel.point.size = 1,
combmatrix.panel.line.size = .5,
combmatrix.label.make_space = TRUE)
env_upset
g <- read.delim("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/GWAS/SNP_analysis/results/LD_merged_sig_snps_FarmCPU.txt")
g <- g %>%
mutate(Year = replace(Year, Year == "ALL", "Inter-Year")) %>%
mutate(Year = replace(Year, Year == "FW", "FW")) %>%
mutate(Year = replace(Year, Year == "AMMI", "AMMI"))
# Group by SNP and collapse all unique environments for each SNP into a list
upset_env_GWAS <- g %>%
group_by(SNP) %>%
summarize(type = list(unique(Year)))
# Upset plot of environment categories
env_upset <- upset_env_GWAS %>%
ggplot(aes(x=type)) +
theme_classic() +
#geom_text(stat='count', aes(label=after_stat(count)), vjust= -.1, size = 4) +
geom_bar() +
scale_x_upset(n_intersections = 99) +
#ggtitle("Marker Trait Associations Per Environment") +
xlab("BLUP") +
ylab("Count") +
theme_combmatrix(combmatrix.panel.point.size = 1,
combmatrix.panel.line.size = .5,
combmatrix.label.make_space = TRUE)
env_upset
g <- read.delim("/Users/jcooper/Desktop/thesis_research/canopy_cover_master/GWAS/SNP_analysis/results/LD_merged_sig_snps_FarmCPU.txt")
# Add phase
g_stage <- g %>%
mutate(Stage = case_when(GDD %in% c(seq(300,450), seq(1,4)) ~ "Juv.",
GDD %in% c(seq(500,1100), seq(5,16)) ~ "Exp.",
GDD %in% c(seq(1150,1650), seq(17,27)) ~"Rep.",
GDD %in% c("AUPC", "Exp", "b") ~ "Comp."))
# Group by SNP and collapse all unique growth stages for each SNP into a list
upset_stage_GWAS <- g_stage %>%
group_by(SNP) %>%
summarize(type = list(unique(Stage)))
# Upset plot of stage categories
stage_upset <- upset_stage_GWAS %>%
ggplot(aes(x=type)) +
theme_classic() +
#geom_text(stat='count', aes(label=after_stat(count)), vjust= -.1, size = 4) +
geom_bar() +
scale_x_upset(n_intersections = 99) +
#ggtitle("Growth Stage") +
xlab("Growth Stage") +
ylab("Count") +
theme_combmatrix(combmatrix.panel.point.size = 1,
combmatrix.panel.line.size = .5,
combmatrix.label.make_space = TRUE)
stage_upset
# Upset plot of environment categories
env_upset <- upset_env_GWAS %>%
ggplot(aes(x=type)) +
theme_classic() +
geom_text(stat='count', aes(label=after_stat(count)), vjust= -.1, size = 4) +
geom_bar() +
scale_x_upset(n_intersections = 99) +
#ggtitle("Marker Trait Associations Per Environment") +
xlab("BLUP") +
ylab("Count") +
theme_combmatrix(combmatrix.panel.point.size = 1,
combmatrix.panel.line.size = .5,
combmatrix.label.make_space = TRUE)
env_upset
273+216+203
169+142+66+66+14+11+10+3+8
+692
489+692
692/1181
library(tidyverse)
library(ggplot2)
library(agricolae)
library(tibble)
library(metan)
library(data.table)
devtools::install_github("ajaygpb/ammistability")
# Load data
AMMI_area <- read.csv("/Users/jcooper/Desktop/thesis_research/canopy_cover/4_trait_stability/AMMI/results/AMMI_AUPC.csv", check.names = FALSE)
# Cut excess columns
AMMI_area_short <- AMMI_area[,c(1:2, 13)]
p <- ggplot(AMMI_area_short, aes(AVAMGE)) +
geom_histogram() +
ggtitle("Area AMMI")
p
